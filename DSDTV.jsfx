desc:DSDTV

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

slider1:delta=0.9<0.5,0.99,0.0001>delta
slider2:amp=0.5<0,1,0.001>Amplitude (unity)

//import elliptic-lp.jsfx-inc

@init
marker = 0x050000;
mult = 2^23;
invmult = 2^-23;
toggle = 1;
commonSrate = 176400*16;
desiredSrate = 2000000;
invdesired = 1/desiredSrate;
upsampling = commonSrate / srate; // ensure that this value is integer 
downsampling = commonSrate / desiredSrate; // this really ought to be close to an integer, but we can deal with it
invdown = desiredSrate / commonSrate;
invup = srate / commonSrate;

samplesPerDoubleFrame = commonSrate / 25;
invsamplesPerDoubleFrame = 25 / commonSrate;
samplesPerFrame = samplesPerDoubleFrame * 0.5;
invsamplesPerFrame = 1 / samplesPerFrame;

// graphics specific definitions/constants
pimult = $pi*2;
togglefreq = 2*$pi/srate*0.25;

// other constants (performance matters here!)
inv305 = 1/305;
invhpos = 1 / (128-6);
inv128 = 1/128;

// syncing fractions
hs = 470/6400;
fp = 1200/6400;
bp = 6235/6400;


hm = 6400/(6400-470);

s1 = 23/640;
s2 = 273/640;
s3 = 320/640;
s4 = 343/640;
s5 = 593/640;

// actual function to display graphics for each rendered sample in each line
function display() (
  //0.2 * cos(pimult*(sqrt((hpos*hpos + vpos*vpos))+togglefreq*c));
  //sin(pimult*hpos) * sin(pimult*vpos);
  -1;
);

// run this for every DSD sample
function upsampled_code()
(
  // wrapped position in frames
  position = (position + 1) % samplesPerDoubleFrame;
  position == 0 ? (toggle = sin(togglefreq*c););
  fraction = position * 625 * invsamplesPerDoubleFrame;
  lineNo = fraction|0;
  lineFrac = fraction-lineNo;
  // horizontal sync at the start of a line
  lineFrac <= s1
  // middle of line for non video frames
  || (s3 < lineFrac && lineFrac < s4 && 
    ((309 < lineNo && lineNo < 317) || lineNo < 5 || lineNo > 621)
  )
  // longer sync for video frames
  || (lineFrac < hs && 4 < lineNo && lineNo < 310)
  || (lineFrac < hs && 316 < lineNo && lineNo < 622)
  // vsync
  // lines of both fields with a double pulse
  || (
    (lineNo < 315 && (lineNo < 2 || lineNo > 312))
    && ((s3 < lineFrac && lineFrac < s5) || lineFrac < s2)
  )
  // third sync line
  || (lineNo == 2 && lineFrac < s2)
  // 313 sync line
  || (lineNo == 312 && s3 < lineFrac && lineFrac < s5)
  ? raw_out = -0.3 : raw_out = 0;

  // calculate graphics, when in the right place
  // first field (of 312 lines)
  22 <= lineNo && lineNo < 310 && (fp <= lineFrac && lineFrac < bp) ? (
    hpos = (lineFrac - hs) * hm - 0.5;
    vpos = (lineNo - 23) * inv305 - 0.5;
    raw_out = 0.4 + 0.3 * display();
  );
  // second field (of 313 lines)
  334 <= lineNo && lineNo < 622 && (fp <= lineFrac && lineFrac < bp) ? (
    hpos = (lineFrac - hs) * hm - 0.5;
    vpos = (lineNo - 336) * inv305 - 0.5;
    raw_out = 0.4 + 0.3 * display();
  );
  sum += raw_out*amp - quant;
  out = omdelta*sum + delta*out;
  ret = out > 0;
  quant = 2*ret-1;
);

@slider
omdelta = 1-delta;

@sample

// upsample to DSD frequency
total = 0;
avg = 0;
loop(upsampling,
  // generate a bit
  upsampled_code();
  // accumulate bit in total (MSB should be oldest bit)
  total *= 2;
  total += ret;
);

// toggle marker (8 MSB of 24 bits) between 05 and FA, like in https://dsd-guide.com/sites/default/files/white-papers/DoP_openStandard_1v1.pdf
marker != 0x050000 ? marker = 0x050000 : marker = 0xFA0000;

total = total | marker;

total&0x800000 ? total = -1-(total~0xffffff);

spl0 = spl1 = total * invmult;
c += 1;

